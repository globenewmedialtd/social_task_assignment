<?php

/**
 * @file
 * Provides Auto assignment for tasks within a group
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\social_task_assignment\Entity\TaskAssignment;
use Drupal\social_task_assignment\TaskAssignmentInterface;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupContentInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\social_task_assignment_auto_assign\Entity\TaskAssignmentAutoAssign;
use Drupal\social_task_assignment_auto_assign\Entity\TaskAssignmentAutoAssignInterface;

/**
 * Implements hook_form_alter().
 */
function social_task_assignment_auto_assign_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Form alters for the task add and edit forms.
  if ($form_id === 'node_task_edit_form' || $form_id === 'node_task_form') { 
    $form['actions']['submit']['#submit'][] = 'social_task_assignment_auto_assign_form_submit';
  }
}

function social_task_assignment_auto_assign_form_submit(array $form, FormStateInterface $form_state) {

  $node = $form_state->getformObject()->getEntity();

  // Check if we have already all
  // group members available to assign.
  $social_task_auto_assign = \Drupal::service('social_task_assignment_auto_assign');
  $social_task_auto_assign->checkIfTaskAssignments($node->id());  

}


/*
 * Implements hook_group_content_insert()
 */
function social_task_assignment_auto_assign_group_content_insert(GroupContentInterface $group_content) {

  $content_plugin = $group_content->getContentPlugin();
  $entityTypeManager = \Drupal::entityTypeManager();

  // When a task has been fired
  if ($content_plugin->getPluginId() === 'group_node:task') {

    $task = $group_content->getEntity()->id();    
    $group = $group_content->getGroup();

    $group_members = $group->getMembers();
    foreach ($group_members as $member) {
      // First we need to check if we are unique
      $conditions = [
        'field_account' => $member->getUser()->id(),
        'field_task' => $task
      ];
      $task_assignment = $entityTypeManager->getStorage('task_assignment')->loadByProperties($conditions);

      if (!$task_assignment) {
        $assignment = TaskAssignment::create([
          'user_id' => $member->getUser()->id(),
          'field_task' => $task,
          'field_account' => $member->getUser()->id(),
        ]);
        $assignment->save();
      }     
  
    }

  } 
  // If we add new Group Members copy them to task assignment
  if ($content_plugin->getPluginId() === 'group_membership') {
    $group_id = $group_content->getGroup()->id();
    $uid = $group_content->getEntity()->id();
    $social_task_auto_assign = \Drupal::service('social_task_assignment_auto_assign');
    $social_task_auto_assign->newGroupMemberAutoAssign($group_id, $uid);
  }  
}

/*
 * Implements hook_group_content_delete()
 */
function social_task_assignment_auto_assign_group_content_delete(GroupContentInterface $group_content) {

  $content_plugin = $group_content->getContentPlugin();
 
  if ($content_plugin->getPluginId() === 'group_membership') {
    $group_id = $group_content->getGroup()->id();
    $uid = $group_content->getEntity()->id();
    $social_task_auto_assign = \Drupal::service('social_task_assignment_auto_assign');
    $social_task_auto_assign->removeAutoAssignEnabled($group_id, $uid);
  }    
}




