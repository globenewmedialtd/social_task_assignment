<?php

use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultNeutral;
use Drupal\Core\Session\AccountInterface;
use Drupal\social_task_assignment\Controller\SocialTaskAssignmentController;

/**
 * @file
 * Primary module hooks for Social Task Assignment module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

 /**
 * Implements hook_ENTITY_TYPE_insert() for node entities.
 *
 * This inserts task assignments when task has been created.
 *
 * @see \Drupal\node\Tests\NodeSaveTest::testNodeSaveOnInsert()
 */

/**
 * Implements hook_theme().
 */
function social_task_assignment_theme() {
  $theme['node__task__task_submission'] = [
    'template' => 'node--task--task-submission',
    'base hook' => 'node'
  ];
/*

  $theme['node__task__teaser'] = [
    'template' => 'node--task--teaser',
    'base hook' => 'node'
  ];
*/

  $theme['task_assignment'] = [
    'render element' => 'elements',
    'template' => 'task-assignment'
  ];

  return $theme;
}



/**
 * Prepares variables for node task.
 */
function social_task_assignment_preprocess_task_assignment(&$variables) {
  // Helpful $entityname variable for templates.
  //$variables['task_assignment'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  $entity = $variables['elements']['#task_assignment'];

  $variables['feedback'] = \Drupal::service('entity.form_builder')->getForm($entity, 'feedback');

}

/**
 * Implements hook_entity_type_alter().
 */
function social_task_assignment_entity_type_alter(array &$entity_types) {
  // We get all form modes, for all entities, and loop through them.
  $form_modes = \Drupal::service('entity_display.repository')->getAllFormModes();
  foreach ($form_modes as $entity_type => $display_modes) {
    if ($entity_type !== 'task_assignment') {
      // We are only interested in adding a handler to the Task assignment entity.
      continue;
    }

    $entity_type = $entity_types[$entity_type];
    foreach ($display_modes as $machine_name => $form_display) {
      if ($machine_name !== 'feedback') {
        // We are only interested in adding this form mode to the definition.
        continue;
      }
      // We get the default handler class. It will be enough for us.
      $default_handler_class = $entity_type->getHandlerClasses()['form']['default'];
      // We set the form class, keyed by the machine name of our custom form mode.
      $entity_type->setFormClass($machine_name, $default_handler_class);
    }
  }
}

/**
 * Return the Task from a given page.
 *
 * @return \Drupal\Core\Entity\EntityInterface|null
 *   The event or NULL if nothing found.
 */
function social_task_assignment_get_current_task() {
  $task = &drupal_static(__FUNCTION__);

  if (!isset($task)) {
    $node = \Drupal::service('current_route_match')->getParameter('node');

    if ($node !== NULL && (!$node instanceof NodeInterface)) {
      $node = Node::load($node);
    }

    if ($node instanceof NodeInterface && $node->getType() === 'task') {
      $task = $node;
    }

    // If we don't have a task then we can go back to NULL.
    if (!isset($event)) {
      $task = NULL;
    }
  }

  return $task;
}

/**
 * Implements
 *   hook_form_BASE_FORM_ID_alter()
 */
function social_task_assignment_form_task_assignment_feedback_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // On our form here we want the following fields
  // visible only when we have an submission.

  $form['field_feedback']['#states'] = [ 
    'visible' => [
      ':input[name="field_status"]' => ['value' => 'submitted'],
    ],
    [
      ':input[name="field_status"]' => ['value' => 'feedback'],
    ],
  ];

  $form['field_upload']['#states'] = [ 
    'visible' => [
      ':input[name="field_status"]' => ['value' => 'submitted'],
    ],
    'visible' => [
      ':input[name="field_status"]' => ['value' => 'feedback'],
    ],
  ];

  $form['field_status']['#states'] = [ 
    'visible' => [
      ':input[name="field_status"]' => ['value' => 'submitted'],
    ],
    'visible' => [
      ':input[name="field_status"]' => ['value' => 'feedback'],
    ],
  ];

  // We hide the action buttons, because we do not need them in
  // our modal dialog form.

  $form['actions']['#attributes'] = ['class' => ['visually-hidden']];




  
}

/**
 * Custom permission check, to see if people have access to users' topics.
 *
 * Implements hook_block_access().
 */
function social_task_assignment_block_access(Block $block, $operation, AccountInterface $account) {

  if ($operation === 'view' && ($block->getPluginId() === 'views_exposed_filter_block:tasks-page_profile' || $block->getPluginId() === 'views_block:tasks-block_user_topics')) {
    // Here we're going to assume by default access is not granted.
    $taskController = SocialTaskAssignmentController::create(\Drupal::getContainer());
    $access = $taskController->myTaskAccess($account);
    // If the 'myTopicAccess' returns 'AccessResultNeutral', we have to assume
    // that access must be denied.
    if ($access instanceof AccessResultNeutral) {
      // Return forbidden, since access was not explicitly granted.
      return AccessResult::forbidden();
    }

    return $access;
  }

  // No opinion.
  return AccessResult::neutral();
}









